// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=storage_mock_test.go -package=storage_test
//

// Package storage_test is a generated GoMock package.
package storage_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockengineStore is a mock of engineStore interface.
type MockengineStore struct {
	ctrl     *gomock.Controller
	recorder *MockengineStoreMockRecorder
}

// MockengineStoreMockRecorder is the mock recorder for MockengineStore.
type MockengineStoreMockRecorder struct {
	mock *MockengineStore
}

// NewMockengineStore creates a new mock instance.
func NewMockengineStore(ctrl *gomock.Controller) *MockengineStore {
	mock := &MockengineStore{ctrl: ctrl}
	mock.recorder = &MockengineStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockengineStore) EXPECT() *MockengineStoreMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockengineStore) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockengineStoreMockRecorder) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockengineStore)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockengineStore) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockengineStoreMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockengineStore)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockengineStore) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockengineStoreMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockengineStore)(nil).Set), ctx, key, value)
}
